%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A323) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 998 316
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 998 316
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
172.36604 8.6520529 m
179.09657 16.717726 l
183.75078 12.868767 188.6324 10.430054 194.54672 10.430054 c
199.20717 10.430054 202.01869 12.279736 202.01869 15.312155 c
202.01869 15.46175 l
202.01869 18.346132 200.243 19.823383 191.59035 22.043938 c
181.16356 24.705484 174.43614 27.591425 174.43614 37.877651 c
174.43614 38.022572 l
174.43614 47.414341 181.97975 53.630333 192.55296 53.630333 c
200.09502 53.630333 206.52647 51.263302 211.77725 47.046589 c
205.86137 38.463566 l
201.2757 41.648697 196.7648 43.570057 192.40343 43.570057 c
188.0405 43.570057 185.74922 41.572338 185.74922 39.05727 c
185.74922 38.909233 l
185.74922 35.50906 187.96573 34.398006 196.91434 32.104214 c
207.41589 29.367867 213.33022 25.595264 213.33022 16.571247 c
213.33022 16.421652 l
213.33022 6.1385427 205.49222 0.37133723 194.32555 0.37133723 c
186.48753 0.37133723 178.57788 3.1092405 172.36604 8.6520529 c
h
W*
0 0 998 316 rc
167.36604 58.630333 m
218.33022 58.630333 l
218.33022 -4.6286626 l
167.36604 -4.6286626 l
h
f
Q
q
267.61215 26.852798 m
267.61215 27.000835 l
267.61215 35.875256 261.10437 43.275543 251.93459 43.275543 c
242.76636 43.275543 236.40654 36.023293 236.40654 27.148872 c
236.40654 27.000835 l
236.40654 18.123297 242.91434 10.724569 252.08255 10.724569 c
261.25079 10.726128 267.6106 17.97526 267.61215 26.852798 c
h
224.50311 26.852798 m
224.50311 27.000835 l
224.50311 41.721935 236.1106 53.77993 252.08255 53.77993 c
268.05606 53.77993 279.51556 41.866856 279.51556 27.148872 c
279.51556 27.000835 l
279.51556 12.279736 267.905 0.22330035 251.93459 0.22330035 c
235.96417 0.22330035 224.50311 12.131699 224.50311 26.852798 c
h
W*
0 0 998 316 rc
219.50311 58.77993 m
284.51556 58.77993 l
284.51556 -4.7766995 l
219.50311 -4.7766995 l
h
f
Q
q
292.61215 52.891708 m
303.1106 52.891708 l
327.36606 21.007679 l
327.36606 52.891708 l
338.60281 52.891708 l
338.60281 1.1115216 l
328.91745 1.1115216 l
303.85202 34.027134 l
303.85202 1.1115216 l
292.61215 1.1115216 l
292.61215 52.891708 l
h
W*
0 0 998 316 rc
287.61215 57.891708 m
343.60281 57.891708 l
343.60281 -3.8884783 l
287.61215 -3.8884783 l
h
f
Q
q
353.10593 26.852798 m
353.10593 27.000835 l
353.10593 41.721935 364.56699 53.77993 380.24454 53.77993 c
389.55762 53.77993 395.17914 51.263302 400.57632 46.680393 c
393.40341 38.022572 l
389.41122 41.349506 385.86136 43.275543 379.87384 43.275543 c
371.59344 43.275543 365.00778 35.951614 365.00778 27.148872 c
365.00778 27.000835 l
365.00778 17.531149 371.51868 10.576532 380.68692 10.576532 c
384.82867 10.576532 388.52338 11.614349 391.40656 13.683749 c
391.40656 21.085592 l
379.94861 21.085592 l
379.94861 30.923033 l
402.42523 30.923033 l
402.42523 8.4323349 l
397.10126 3.9211059 389.78036 0.22330035 380.31775 0.22330035 c
364.19626 0.22330035 353.10593 11.539552 353.10593 26.852798 c
h
W*
0 0 998 316 rc
348.10593 58.77993 m
407.42523 58.77993 l
407.42523 -4.7766995 l
348.10593 -4.7766995 l
h
f
Q
q
442.14487 26.852798 m
442.14487 27.000835 l
442.14487 41.721935 453.2352 53.77993 469.13394 53.77993 c
478.8894 53.77993 484.7352 50.524677 489.54361 45.787495 c
482.29285 37.430424 l
478.29907 41.056549 474.23209 43.275543 469.0592 43.275543 c
460.33334 43.275543 454.04828 36.023293 454.04828 27.148872 c
454.04828 27.000835 l
454.04828 18.123297 460.18536 10.724569 469.0592 10.724569 c
474.97195 10.726128 478.59344 13.09316 482.66043 16.790966 c
489.90967 9.4670353 l
484.58411 3.7730689 478.66821 0.22330035 468.69003 0.22330035 c
453.45795 0.22330035 442.14487 11.98522 442.14487 26.852798 c
h
W*
0 0 998 316 rc
437.14487 58.77993 m
494.90967 58.77993 l
494.90967 -4.7766995 l
437.14487 -4.7766995 l
h
f
Q
q
542.78973 26.852798 m
542.78973 27.000835 l
542.78973 35.875256 536.27881 43.275543 527.11371 43.275543 c
517.9408 43.275543 511.58411 36.023293 511.58411 27.148872 c
511.58411 27.000835 l
511.58411 18.123297 518.09192 10.724569 527.26166 10.724569 c
536.42993 10.726128 542.78973 17.97526 542.78973 26.852798 c
h
499.68069 26.852798 m
499.68069 27.000835 l
499.68069 41.721935 511.28659 53.77993 527.26166 53.77993 c
543.23364 53.77993 554.69159 41.866856 554.69159 27.148872 c
554.69318 27.000835 l
554.69318 12.279736 543.08411 0.22330035 527.11371 0.22330035 c
511.14331 0.22330035 499.68069 12.131699 499.68069 26.852798 c
499.68069 26.852798 l
h
W*
0 0 998 316 rc
494.68069 58.77993 m
559.69318 58.77993 l
559.69318 -4.7766995 l
494.68069 -4.7766995 l
h
f
Q
q
567.79126 52.891708 m
578.28973 52.891708 l
602.54517 21.007679 l
602.54517 52.891708 l
613.78503 52.891708 l
613.78503 1.1115216 l
604.09503 1.1115216 l
579.0296 34.027134 l
579.0296 1.1115216 l
567.79126 1.1115216 l
567.79126 52.891708 l
W*
0 0 998 316 rc
562.79126 57.891708 m
618.78503 57.891708 l
618.78503 -3.8884783 l
562.79126 -3.8884783 l
h
f
Q
q
641.59344 42.387321 m
625.84265 42.387321 l
625.84265 52.891708 l
668.72894 52.891708 l
668.72894 42.387321 l
652.97974 42.387321 l
652.97974 1.1115216 l
641.59344 1.1115216 l
641.59344 42.387321 l
W*
0 0 998 316 rc
620.84265 57.891708 m
673.72894 57.891708 l
673.72894 -3.8884783 l
620.84265 -3.8884783 l
h
f
Q
q
681.89874 52.891708 m
720.93927 52.891708 l
720.93927 42.758194 l
693.21497 42.758194 l
693.21497 32.255367 l
717.61371 32.255367 l
717.61371 22.118734 l
693.21497 22.118734 l
693.21497 11.243478 l
721.31152 11.243478 l
721.31152 1.1115216 l
681.89874 1.1115216 l
681.89874 52.891708 l
W*
0 0 998 316 rc
676.89874 57.891708 m
726.31152 57.891708 l
726.31152 -3.8884783 l
676.89874 -3.8884783 l
h
f
Q
q
732.26324 8.6520529 m
738.99066 16.717726 l
743.64795 12.868767 748.5296 10.430054 754.44702 10.430054 c
759.10126 10.430054 761.91431 12.279736 761.91431 15.312155 c
761.91431 15.46175 l
761.91431 18.346132 760.13861 19.823383 751.48755 22.043938 c
741.06073 24.705484 734.33331 27.591425 734.33331 37.877651 c
734.3349 38.022572 l
734.3349 47.414341 741.87384 53.630333 752.45013 53.630333 c
759.98907 53.630333 766.42523 51.263302 771.67444 47.046589 c
765.75854 38.463566 l
761.17444 41.648697 756.66199 43.570057 752.3006 43.570057 c
747.9408 43.570057 745.64642 41.572338 745.64642 39.05727 c
745.64642 38.909233 l
745.64642 35.50906 747.86292 34.398006 756.81 32.104214 c
767.31152 29.367867 773.22583 25.595264 773.22583 16.571247 c
773.22742 16.421652 l
773.22742 6.1385427 765.3894 0.37133723 754.22119 0.37133723 c
746.38788 0.37133723 738.4751 3.1092405 732.26324 8.6520529 c
W*
0 0 998 316 rc
727.26324 58.630333 m
778.22742 58.630333 l
778.22742 -4.6286626 l
727.26324 -4.6286626 l
h
f
Q
q
798.45013 42.387321 m
782.70093 42.387321 l
782.70093 52.891708 l
825.58569 52.891708 l
825.58569 42.387321 l
809.83331 42.387321 l
809.83331 1.1115216 l
798.45013 1.1115216 l
798.45013 42.387321 l
W*
0 0 998 316 rc
777.70093 57.891708 m
830.58569 57.891708 l
830.58569 -3.8884783 l
777.70093 -3.8884783 l
h
f
Q
q
847.57477 123.28247 m
834.23212 123.95876 826.6059 139.75664 827.53735 155.90201 c
829.17444 184.35625 852.94391 213.07541 852.94391 213.07541 c
858.49377 208.00943 875.18536 180.55092 874.27881 159.53903 c
873.3941 139.01645 860.90808 122.60773 847.57477 123.28247 c
h
863.45795 222.52795 m
869.1947 229.21298 873.12927 233.11026 872.24298 237.74458 c
871.3598 242.38048 855.66669 245.59521 848.68378 239.14703 c
828.02802 255.54485 832.25702 236.33589 835.24609 232.05219 c
810.84735 214.88614 794.33643 169.69748 807.61841 134.43822 c
820.60278 99.970551 859.76947 95.718002 880.3053 119.94151 c
898.48755 141.39128 895.24298 180.82051 863.45795 222.52795 c
863.45795 222.52795 l
h
W*
0 0 998 316 rc
797.89899 250.66197 m
896.38416 250.66197 l
896.38416 99.618263 l
797.89899 99.618263 l
h
f
Q
q
98.607475 291.05188 m
52.573208 294.38818 1.6978194 256.24609 3.6433022 206.84695 c
3.8302181 202.10353 7.8395638 197.75905 13.595016 197.75905 c
20.714952 197.75905 41.568535 198.54909 41.568535 198.54909 c
41.568535 198.54909 0.42367601 166.09785 0.42367601 128.10379 c
0.42367601 108.05492 15.457944 84.04023 46.842678 84.04023 c
90.828659 84.041786 123.61526 120.06773 123.55296 150.58826 c
123.54984 152.91167 120.88474 156.18874 116.58723 150.97783 c
109.77103 142.70958 73.213394 105.15028 37.082554 105.15028 c
24.951714 105.15185 14.403427 112.01296 14.403427 126.52058 c
14.403427 145.51917 44.470406 182.45827 96.160439 196.97055 c
108.82087 200.66057 109.87383 218.34085 93.786606 219.13089 c
77.973518 219.90848 23.36916 213.85611 19.41433 213.85611 c
15.457944 213.85611 15.101246 214.71005 16.512461 218.34085 c
18.359814 223.0905 38.401871 258.18146 98.534271 264.77768 c
118.84268 266.36246 116.8053 289.73047 98.607475 291.05188 c
h
W*
0 0 998 316 rc
-4.576324 296.25516 m
128.55305 296.25516 l
128.55305 79.04023 l
-4.576324 79.04023 l
h
f
Q
q
163.69159 233.3549 m
163.69159 245.28668 145.97975 252.61528 139.3053 235.71881 c
126.45483 203.18654 122.5514 104.608 165.55919 104.608 c
184.43925 104.60956 208.53427 145.99756 208.53427 186.3976 c
208.53427 219.71526 194.89876 241.49069 192.01402 245.42224 c
189.12929 249.35847 185.1947 247.25946 185.71962 239.9106 c
186.24455 232.56953 188.34113 164.62527 167.09969 139.96233 c
158.71028 130.78404 152.52647 140.34567 151.63084 149.40552 c
149.00778 175.90413 163.69159 216.04082 163.69159 233.3549 c
h
W*
0 0 998 316 rc
125.60448 252.37581 m
213.53427 252.37581 l
213.53427 99.608002 l
125.60448 99.608002 l
h
f
Q
q
360.2352 127.46957 m
348.15887 127.46957 341.44861 143.07422 341.44861 160.02055 c
341.44861 189.8866 362.91589 217.05838 362.91589 217.05838 c
368.81931 209.52719 383.04205 188.27377 383.04205 166.75078 c
383.04205 145.22466 372.30374 127.46957 360.2352 127.46957 c
h
369.89407 226.47508 m
369.89407 226.47508 376.71652 235.74843 372.6106 240.98114 c
367.99533 246.87769 353.20093 248.71646 339.34113 233.18193 c
321.09344 212.7357 308.30841 169.58841 322.12927 133.3895 c
335.34113 98.776909 372.33646 95.853569 389.47974 122.08571 c
404.77414 145.49734 400.75079 184.5074 369.89407 226.47508 c
h
W*
0 0 998 316 rc
311.30112 250.2784 m
403.14206 250.2784 l
403.14206 99.608444 l
311.30112 99.608444 l
h
f
Q
q
248.5405 191.1644 m
249.59657 204.61861 250.65109 218.6042 250.65109 218.6042 c
250.65265 218.60576 280.71964 226.25848 291.00156 225.19885 c
299.95639 224.28258 301.81619 220.45232 297.25702 213.36992 c
286.52026 196.69473 261.83334 190.92285 248.5405 191.1644 c
h
313.08255 101.92931 m
300.21964 119.78724 284.06543 155.53581 259.35358 177.1788 c
284.40967 178.76358 315.79285 198.28575 315.79285 219.13089 c
315.79285 234.56725 299.74142 245.69183 278.90811 245.69183 c
258.07321 245.69183 235.0919 238.65462 226.38785 233.37984 c
215.04517 226.78363 223.48598 211.21794 234.03738 215.4362 c
234.03738 215.4362 230.08099 196.97055 229.02647 187.20634 c
220.4595 188.26599 218.73831 186.67966 219.26636 184.83153 c
219.79594 182.98653 223.48598 181.40019 227.70717 176.12073 c
226.38785 164.51619 224.05141 112.89184 224.57944 108.40554 c
225.1106 103.88652 227.83177 103.10738 231.69937 107.87884 c
235.12929 112.09711 242.47508 122.29919 245.90343 160.81839 c
249.85982 157.39328 260.67288 142.90125 273.86136 125.99388 c
293.20248 101.19225 299.57944 99.403336 307.52493 96.60778 c
311.81152 95.093124 316.23209 97.55677 313.08255 101.92931 c
h
W*
0 0 998 316 rc
214.17973 250.69183 m
320.79285 250.69183 l
320.79285 91.159821 l
214.17973 91.159821 l
h
f
Q
q
425.02805 214.11946 m
425.57944 263.45312 451.24142 278.89417 465.21808 278.89417 c
484.73676 278.89417 492.79596 263.98764 494.11371 257.38831 c
495.43146 250.79366 502.81775 245.51886 505.19159 256.3349 c
507.56699 267.15094 530.5296 300.13513 558.74768 300.13513 c
584.59344 300.13669 593.54364 273.47134 592.76788 250.79208 c
590.65576 189.05447 511.15109 139.78001 500.68692 108.66422 c
491.36917 127.51009 424.37228 154.75043 425.02805 214.11946 c
h
567.97974 315.43591 m
544.77106 315.43591 517.32086 298.28699 500.70871 269.78912 c
496.22586 280.08157 480.25235 291.29654 461.26636 291.29654 c
445.96729 291.29654 403.02182 272.16705 403.02182 210.42477 c
403.02182 130.74353 483.60437 114.37688 499.89563 89.612648 c
501.01401 87.909439 504.62149 86.623856 505.99533 90.692535 c
518.99377 129.06993 619.78662 172.43227 619.78662 250.5303 c
619.78662 294.32895 591.18848 315.43591 567.97974 315.43591 c
567.97974 315.43591 l
h
W*
0 0 998 316 rc
398.02182 320.43591 m
624.78662 320.43591 l
624.78662 82.98745 l
398.02182 82.98745 l
h
f
Q
q
633.54053 242.26828 m
634.23834 215.45178 610.67133 172.81561 609.16357 141.69357 c
608.05762 119.00654 612.12305 109.82825 614.05609 106.83946 c
616.07629 103.71043 620.50159 103.44085 621.68378 109.13014 c
625.20715 126.12945 649.47662 170.94255 652.58722 206.9794 c
654.49377 229.06807 647.64484 242.58461 639.76166 245.1402 c
636.24298 246.2793 633.44238 245.85077 633.54053 242.26828 c
W*
0 0 998 316 rc
603.97607 250.70044 m
657.90936 250.70044 l
657.90936 99.633904 l
603.97607 99.633904 l
h
f
Q
q
721.43927 245.69183 m
688.46417 245.69183 664.68066 233.99536 664.68066 207.43599 c
664.68225 191.07556 676.81152 179.82008 696.15265 176.6521 c
707.40656 174.54219 718.3598 173.71474 722.35046 172.25462 c
729.56543 169.61957 712.29437 161.30457 685.41589 143.06799 c
667.05298 130.60796 653.6402 117.44358 646.47351 103.46578 c
643.99066 98.627312 647.35046 94.007004 652.54053 97.581703 c
662.61993 104.52541 684.70715 116.09722 706.13708 127.89187 c
726.53113 139.11774 745.74146 151.45311 745.74146 166.80063 c
745.74146 180.70052 735.31464 185.93947 727.2757 186.85574 c
713.38477 188.43428 683.31775 187.20634 683.31775 204.61861 c
683.31934 211.12755 691.93304 219.66071 719.62616 219.66071 c
740.99066 219.66071 738.83643 245.69183 721.43927 245.69183 c
W*
0 0 998 316 rc
640.63873 250.69183 m
750.74146 250.69183 l
750.74146 91.312538 l
640.63873 91.312538 l
h
f
Q
q
762.96265 240.85025 m
773.75232 220.12976 755.39099 163.76511 755.39099 142.35118 c
755.39252 120.93725 757.8006 113.38893 763.46729 106.44833 c
766.3645 102.89233 770.16821 105.02406 770.51868 108.86368 c
772.2757 127.73916 792.54364 178.96771 793.85205 202.77203 c
795.52338 233.09311 780.55609 244.841 771.78815 245.58275 c
766.92993 245.99258 760.5047 245.11371 762.96265 240.85025 c
W*
0 0 998 316 rc
750.39099 250.67339 m
798.98102 250.67339 l
798.98102 99.633461 l
750.39099 99.633461 l
h
f
Q
q
770.38629 270.08676 m
769.8349 250.34175 802.75391 247.15506 802.75391 271.29443 c
802.75391 292.33124 785.16046 309.73257 781.62775 312.62787 c
776.1355 317.10794 768.36914 316.29919 770.19781 309.05786 c
774.40967 293.88174 770.57477 276.98526 770.38629 270.08676 c
W*
0 0 998 316 rc
764.92511 320.3927 m
807.75391 320.3927 l
807.75391 249.2256 l
764.92511 249.2256 l
h
f
Q
q
996.20715 106.66026 m
991.90497 133.18068 997.82245 167.30553 997.82245 199.46069 c
997.82245 224.00987 977.42993 236.63042 965.3302 236.63042 c
949.60901 236.63042 940.27106 229.53867 940.27106 229.53867 c
940.44702 234.2104 941.25391 241.39876 941.1059 243.66606 c
940.93304 246.25905 937.82556 246.26216 933.33331 243.83904 c
908.61682 228.4541 905.04828 184.30951 905.04828 153.71106 c
905.04987 123.11105 909.91742 112.2654 910.42834 108.11881 c
910.92371 104.18103 915.76013 103.592 917.66199 107.04984 c
930.79596 132.6384 932.3302 179.23418 936.81775 205.16869 c
943.04364 213.63951 968.43927 215.19467 969.47974 194.9666 c
970.53583 174.38324 968.55139 122.34438 989.59656 104.17636 c
992.43457 101.72986 996.82867 102.85026 996.20715 106.66026 c
W*
0 0 998 316 rc
900.04828 250.63417 m
1002.8224 250.63417 l
1002.8224 97.880005 l
900.04828 97.880005 l
h
f
ep
end
%%Trailer
%%EOF
